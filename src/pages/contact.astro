---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Horizon D'Impact 3.0 - Contact">
	<section class="hero" data-animate>
		<div class="hero-content">
			<h1 class="hero-title">Contactez-nous</h1>
			<p class="hero-subtitle">Nous sommes là pour vous accompagner dans votre développement</p>
		</div>
		<div class="hero-decoration"></div>
	</section>

	<section class="faq" data-animate>
		<div class="faq-container">
			<h2 class="faq-title">Questions fréquentes</h2>
			<div class="faq-grid">
				<div class="faq-item">
					<button class="faq-question">
						<span>Quels sont vos délais de réponse ?</span>
						<svg class="faq-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
						</svg>
					</button>
					<div class="faq-answer">
						<p>Nous nous engageons à répondre à toutes vos demandes dans un délai de 24 à 48 heures ouvrables.</p>
					</div>
				</div>

				<div class="faq-item">
					<button class="faq-question">
						<span>Comment puis-je prendre rendez-vous ?</span>
						<svg class="faq-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
						</svg>
					</button>
					<div class="faq-answer">
						<p>Vous pouvez prendre rendez-vous en nous contactant par téléphone ou en remplissant le formulaire ci-dessous. Nous vous recontacterons pour confirmer la date et l'heure.</p>
					</div>
				</div>

				<div class="faq-item">
					<button class="faq-question">
						<span>Quels sont vos horaires d'ouverture ?</span>
						<svg class="faq-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
						</svg>
					</button>
					<div class="faq-answer">
						<p>Nous sommes ouverts du lundi au vendredi, de 8h à 18h. Les rendez-vous peuvent être pris en dehors de ces horaires selon disponibilité.</p>
					</div>
				</div>
			</div>
		</div>
	</section>

	<section class="contact" data-animate>
		<div class="contact-container">
			<div class="contact-info">
				<div class="contact-card">
					<div class="contact-icon">
						<svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
						</svg>
					</div>
					<h3 class="contact-title">Téléphone</h3>
					<a href="tel:+237696953397" class="contact-link">+237 696.953.397</a>
				</div>

				<div class="contact-card">
					<div class="contact-icon">
						<svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
						</svg>
					</div>
					<h3 class="contact-title">Email</h3>
					<a href="mailto:horizon.dimpact.3.0@gmail.com" class="contact-link">horizon.dimpact.3.0@gmail.com</a>
				</div>

				<div class="contact-card">
					<div class="contact-icon">
						<svg class="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z" />
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
						</svg>
					</div>
					<h3 class="contact-title">Adresse</h3>
					<address class="contact-address">
						Forestière Logbaba<br />
						Douala, Cameroun
					</address>
				</div>
			</div>

			<div class="contact-form">
				<h2 class="form-title">Envoyez-nous un message</h2>
				<form id="contactForm" class="form">
					<div class="form-group">
						<label for="name" class="form-label">Nom complet</label>
						<input type="text" id="name" name="name" class="form-input" required />
					</div>

					<div class="form-group">
						<label for="email" class="form-label">Email</label>
						<input type="email" id="email" name="email" class="form-input" required />
					</div>

					<div class="form-group">
						<label for="phone" class="form-label">Téléphone</label>
						<input type="tel" id="phone" name="phone" class="form-input" />
					</div>

					<div class="form-group">
						<label for="subject" class="form-label">Sujet</label>
						<input type="text" id="subject" name="subject" class="form-input" required />
					</div>

					<div class="form-group">
						<label for="message" class="form-label">Message</label>
						<textarea id="message" name="message" class="form-textarea" rows="5" required></textarea>
					</div>

					<button type="submit" class="form-button">Envoyer le message</button>
				</form>
			</div>
		</div>
	</section>
</Layout>

<div id="notification" class="notification" role="alert" aria-live="polite"></div>

<style>
	/* Hero Section */
	.hero {
		position: relative;
		min-height: 40vh;
		background: linear-gradient(120deg, var(--primary) 0%, var(--secondary) 100%);
		color: var(--light);
		padding: 6rem 1rem 4rem;
		overflow: hidden;
		display: flex;
		align-items: center;
		justify-content: center;
		text-align: center;
	}

	.hero-content {
		max-width: 800px;
		position: relative;
		z-index: 2;
	}

	.hero-title {
		font-size: clamp(2rem, 5vw, 3.5rem);
		font-weight: 800;
		margin-bottom: 1.5rem;
		line-height: 1.2;
	}

	.hero-subtitle {
		font-size: clamp(1.1rem, 2vw, 1.3rem);
		margin-bottom: 2.5rem;
		opacity: 0.9;
	}

	.hero-decoration {
		position: absolute;
		inset: 0;
		background: url('data:image/svg+xml;utf8,<svg width="1440" height="900" viewBox="0 0 1440 900" fill="none" xmlns="http://www.w3.org/2000/svg"><g opacity="0.12"><circle cx="300" cy="400" r="100" fill="%233949ab"/><circle cx="900" cy="200" r="60" fill="%231a237e"/><circle cx="1200" cy="600" r="40" fill="%233949ab"/><path d="M0 800L1440 100" stroke="%233949ab" stroke-width="2"/><path d="M0 600L1440 300" stroke="%231a237e" stroke-width="2"/></g></svg>');
		background-size: cover;
		background-position: center;
		filter: blur(2px) brightness(1.1);
		opacity: 0.9;
	}

	/* Contact Section */
	.contact {
		padding: 5rem 1rem;
		background: var(--light);
	}

	.contact-container {
		max-width: 1200px;
		margin: 0 auto;
		display: grid;
		grid-template-columns: 1fr 2fr;
		gap: 4rem;
	}

	.contact-info {
		display: flex;
		flex-direction: column;
		gap: 2rem;
	}

	.contact-card {
		background: white;
		padding: 2rem;
		border-radius: var(--radius);
		box-shadow: var(--shadow);
		transition: transform 0.3s ease;
	}

	.contact-card:hover {
		transform: translateY(-5px);
	}

	.contact-icon {
		width: 4rem;
		height: 4rem;
		margin-bottom: 1.5rem;
		background: var(--primary);
		color: white;
		border-radius: var(--radius-full);
		display: flex;
		align-items: center;
		justify-content: center;
	}

	.contact-title {
		color: var(--primary);
		font-size: 1.2rem;
		font-weight: 700;
		margin-bottom: 0.5rem;
	}

	.contact-link {
		color: var(--text);
		text-decoration: none;
		opacity: 0.8;
		transition: opacity 0.2s ease;
	}

	.contact-link:hover {
		opacity: 1;
	}

	.contact-address {
		color: var(--text);
		opacity: 0.8;
		font-style: normal;
		line-height: 1.6;
	}

	/* Form Section */
	.contact-form {
		background: white;
		padding: 2rem;
		border-radius: var(--radius);
		box-shadow: var(--shadow);
	}

	.form-title {
		color: var(--primary);
		font-size: 1.8rem;
		font-weight: 700;
		margin-bottom: 2rem;
	}

	.form {
		display: grid;
		gap: 1.5rem;
	}

	.form-group {
		display: flex;
		flex-direction: column;
		gap: 0.5rem;
	}

	.form-label {
		color: var(--text);
		font-weight: 500;
	}

	.form-input,
	.form-textarea {
		padding: 0.75rem 1rem;
		border: 1px solid var(--gray-300);
		border-radius: var(--radius);
		font-size: 1rem;
		transition: border-color 0.2s ease;
	}

	.form-input:focus,
	.form-textarea:focus {
		outline: none;
		border-color: var(--primary);
	}

	.form-textarea {
		resize: vertical;
		min-height: 120px;
	}

	.form-button {
		background: var(--primary);
		color: var(--light);
		padding: 1rem 2rem;
		border: none;
		border-radius: var(--radius);
		font-weight: 600;
		cursor: pointer;
		transition: transform 0.3s ease, box-shadow 0.3s ease;
	}

	.form-button:hover {
		transform: translateY(-2px);
		box-shadow: var(--shadow-lg);
	}

	/* Responsive Design */
	@media (max-width: 1024px) {
		.contact-container {
			grid-template-columns: 1fr;
			gap: 3rem;
		}

		.contact-info {
			flex-direction: row;
			flex-wrap: wrap;
		}

		.contact-card {
			flex: 1 1 300px;
		}
	}

	@media (max-width: 768px) {
		.hero {
			min-height: 30vh;
			padding: 4rem 1rem 3rem;
		}

		.contact-info {
			flex-direction: column;
		}

		.contact-card {
			flex: 1 1 100%;
		}
	}

	@media (max-width: 480px) {
		.hero-title {
			font-size: 2rem;
		}

		.hero-subtitle {
			font-size: 1.1rem;
		}

		.form-title {
			font-size: 1.5rem;
		}

		.contact-card,
		.contact-form {
			padding: 1.5rem;
		}
	}

	/* Styles pour les messages d'erreur */
	.error {
		border-color: var(--error) !important;
	}

	.error-message {
		color: var(--error);
		font-size: 0.875rem;
		margin-top: 0.25rem;
	}

	/* Style pour le bouton désactivé */
	.form-button:disabled {
		opacity: 0.7;
		cursor: not-allowed;
		transform: none !important;
		box-shadow: none !important;
	}

	/* Animation de chargement */
	@keyframes spin {
		to {
			transform: rotate(360deg);
		}
	}

	.form-button:disabled::after {
		content: '';
		display: inline-block;
		width: 1rem;
		height: 1rem;
		margin-left: 0.5rem;
		border: 2px solid var(--light);
		border-top-color: transparent;
		border-radius: 50%;
		animation: spin 1s linear infinite;
	}

	/* FAQ Section */
	.faq {
		padding: 5rem 1rem;
		background: var(--gray-50);
	}

	.faq-container {
		max-width: 1200px;
		margin: 0 auto;
	}

	.faq-title {
		color: var(--primary);
		font-size: 2rem;
		font-weight: 700;
		text-align: center;
		margin-bottom: 3rem;
	}

	.faq-grid {
		display: grid;
		gap: 1.5rem;
	}

	.faq-item {
		background: white;
		border-radius: var(--radius);
		box-shadow: var(--shadow);
		overflow: hidden;
	}

	.faq-question {
		width: 100%;
		padding: 1.5rem;
		display: flex;
		justify-content: space-between;
		align-items: center;
		background: none;
		border: none;
		cursor: pointer;
		font-size: 1.1rem;
		font-weight: 600;
		color: var(--text);
		text-align: left;
		transition: background-color 0.3s ease;
	}

	.faq-question:hover {
		background-color: var(--gray-50);
	}

	.faq-icon {
		width: 1.5rem;
		height: 1.5rem;
		transition: transform 0.3s ease;
	}

	.faq-item.active .faq-icon {
		transform: rotate(180deg);
	}

	.faq-answer {
		padding: 0 1.5rem;
		max-height: 0;
		overflow: hidden;
		transition: max-height 0.3s ease, padding 0.3s ease;
	}

	.faq-item.active .faq-answer {
		padding: 0 1.5rem 1.5rem;
		max-height: 200px;
	}

	.faq-answer p {
		color: var(--text);
		opacity: 0.8;
		line-height: 1.6;
	}

	@media (max-width: 768px) {
		.faq-title {
			font-size: 1.8rem;
		}

		.faq-question {
			font-size: 1rem;
			padding: 1.25rem;
		}
	}

	/* Notification System */
	.notification {
		position: fixed;
		bottom: 2rem;
		right: 2rem;
		padding: 1rem 2rem;
		border-radius: var(--radius);
		background: white;
		box-shadow: var(--shadow-lg);
		transform: translateY(150%);
		transition: transform 0.3s ease;
		z-index: 1000;
	}

	.notification.show {
		transform: translateY(0);
	}

	.notification.success {
		background: var(--success);
		color: white;
	}

	.notification.error {
		background: var(--error);
		color: white;
	}

	@media (max-width: 768px) {
		.notification {
			left: 1rem;
			right: 1rem;
			bottom: 1rem;
			text-align: center;
		}
	}
</style>

<script>
	// Système de notification
	function showNotification(message: string, type: 'success' | 'error' = 'success') {
		const notification = document.getElementById('notification');
		if (!notification) return;

		notification.textContent = message;
		notification.className = `notification ${type} show`;

		setTimeout(() => {
			notification.classList.remove('show');
		}, 5000);
	}

	// Mise à jour du gestionnaire de formulaire
	document.getElementById('contactForm')?.addEventListener('submit', async (e) => {
		e.preventDefault();

		const form = e.target as HTMLFormElement;
		const formData = new FormData(form);
		const data = Object.fromEntries(formData.entries());

		// Validation des champs
		const email = formData.get('email') as string;
		const phone = formData.get('phone') as string;
		const message = formData.get('message') as string;

		// Validation de l'email
		const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
		if (!emailRegex.test(email)) {
			showNotification('Veuillez entrer une adresse email valide', 'error');
			return;
		}

		// Validation du téléphone (si fourni)
		if (phone) {
			const phoneRegex = /^[+]?[(]?[0-9]{3}[)]?[-\s.]?[0-9]{3}[-\s.]?[0-9]{4,6}$/;
			if (!phoneRegex.test(phone)) {
				showNotification('Veuillez entrer un numéro de téléphone valide', 'error');
				return;
			}
		}

		// Validation de la longueur du message
		if (message.length < 10) {
			showNotification('Le message doit contenir au moins 10 caractères', 'error');
			return;
		}

		try {
			// Ici, vous pouvez ajouter la logique pour envoyer les données du formulaire
			console.log('Données du formulaire:', data);
			
			// Désactiver le bouton pendant l'envoi
			const submitButton = form.querySelector('button[type="submit"]') as HTMLButtonElement;
			submitButton.disabled = true;
			submitButton.textContent = 'Envoi en cours...';

			// Simuler un délai d'envoi (à remplacer par votre logique d'API)
			await new Promise(resolve => setTimeout(resolve, 1000));

			showNotification('Message envoyé avec succès ! Nous vous répondrons dans les plus brefs délais.');
			form.reset();
		} catch (error) {
			console.error('Erreur lors de l\'envoi du formulaire:', error);
			showNotification('Une erreur est survenue lors de l\'envoi du message. Veuillez réessayer.', 'error');
		} finally {
			// Réactiver le bouton
			const submitButton = form.querySelector('button[type="submit"]') as HTMLButtonElement;
			submitButton.disabled = false;
			submitButton.textContent = 'Envoyer le message';
		}
	});

	// Ajout de la validation en temps réel
	const inputs = document.querySelectorAll('.form-input, .form-textarea');
	inputs.forEach(input => {
		input.addEventListener('input', (e) => {
			const target = e.target as HTMLInputElement;
			const errorMessage = target.parentElement?.querySelector('.error-message');
			
			if (target.validity.valid) {
				target.classList.remove('error');
				errorMessage?.remove();
			} else {
				target.classList.add('error');
				if (!errorMessage) {
					const error = document.createElement('span');
					error.className = 'error-message';
					error.textContent = target.validationMessage;
					target.parentElement?.appendChild(error);
				}
			}
		});
	});

	// Gestion des FAQ
	document.querySelectorAll('.faq-question').forEach(question => {
		question.addEventListener('click', () => {
			const faqItem = question.parentElement;
			const isActive = faqItem?.classList.contains('active');

			// Fermer toutes les autres FAQ
			document.querySelectorAll('.faq-item').forEach(item => {
				item.classList.remove('active');
			});

			// Ouvrir/fermer la FAQ cliquée
			if (!isActive) {
				faqItem?.classList.add('active');
			}
		});
	});
</script> 